#include<bits/stdc++.h>
using namespace std;
template<typename T>
class BinaryTreeNode{
public:
T data;
BinaryTreeNode<int>* left;
BinaryTreeNode<int>* right;
BinaryTreeNode(T data)
{
this->data;
left=NULL;
right=NULL;
};

void zigzagTree(BinaryTreeNode<int>* root)
{
stack<BinaryTreeNode<int>*>currentlevel;
stack<BinaryTreeNode<int>*>nextlevel;
currentlevel.push(root);
bool lefttoright=true;
while(!currentlevel.empty())
{
BinaryTreeNode<int>* temp=currentlevel.top();
        currentlevel.pop();
    if(temp){
        
        cout<<temp->data<<" ";
    if(lefttoright)
    {
        if(temp->left)
    nextlevel.push(temp->left);
        if(temp->right)
            nextlevel.push(temp->right);
    }
        else
        {
if(temp->right)
nextlevel.push(temp->right);
            if(temp->left)
        nextlevel.push(temp->left);
        }
    }
        if(currentlevel.empty())
        {
lefttoright=!lefttoright;
            swap(currentlevel,nextlevel);
            cout<<endl;
        }

}
}
BinaryTreeNode<int>* takeInput() {
    int rootData;
    //cout << "Enter root data : ";
    cin >> rootData;
    if(rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while(!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
	q.pop();
        int leftChild, rightChild;
        //cout << "Enter left child of " << currentNode -> data << " : ";
        cin >> leftChild;
        if(leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode -> left =leftNode;
            q.push(leftNode);
        }
        //cout << "Enter right child of " << currentNode -> data << " : ";
        cin >> rightChild;
        if(rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode -> right =rightNode;
            q.push(rightNode);
        }
    }
    return root;
}
int main()
 {
    BinaryTreeNode<int>* root = takeInput();
    zigZagOrder(root);
}
